function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { ReactComponent as IconCheck } from '@ant-design/icons-svg/inline-svg/outlined/check.svg';
import { ReactComponent as IconCopy } from '@ant-design/icons-svg/inline-svg/outlined/copy.svg';
import classNames from 'classnames';
import Highlight, { defaultProps } from 'prism-react-renderer';
import 'prism-themes/themes/prism-one-light.css';
import React, { useRef, useState } from 'react';
import { CopyToClipboard } from 'react-copy-to-clipboard';
import "./index.less";
/**
 * define DSL which can be highlighted as similar language
 */

var SIMILAR_DSL = {
  acss: 'css',
  axml: 'markup'
};

var SourceCode = function SourceCode(props) {
  var children = props.children,
      lang = props.lang,
      _props$highlightLines = props.highlightLines,
      highlightLines = _props$highlightLines === void 0 ? [] : _props$highlightLines;
  var timer = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isCopied = _useState2[0],
      setIsCopied = _useState2[1];

  return /*#__PURE__*/React.createElement("div", {
    className: "dumi-default-source-code"
  }, /*#__PURE__*/React.createElement(CopyToClipboard, {
    text: children,
    onCopy: function onCopy() {
      setIsCopied(true);
      clearTimeout(timer.current);
      timer.current = window.setTimeout(function () {
        return setIsCopied(false);
      }, 2000);
    }
  }, /*#__PURE__*/React.createElement("button", {
    type: "button",
    className: "dumi-default-source-code-copy",
    "data-copied": isCopied || undefined
  }, isCopied ? /*#__PURE__*/React.createElement(IconCheck, null) : /*#__PURE__*/React.createElement(IconCopy, null))), /*#__PURE__*/React.createElement(Highlight, _extends({}, defaultProps, {
    code: children.trim(),
    language: SIMILAR_DSL[lang] || lang,
    theme: undefined
  }), function (_ref) {
    var className = _ref.className,
        style = _ref.style,
        tokens = _ref.tokens,
        getLineProps = _ref.getLineProps,
        getTokenProps = _ref.getTokenProps;
    return /*#__PURE__*/React.createElement("pre", {
      className: className,
      style: style
    }, tokens.map(function (line, i) {
      return /*#__PURE__*/React.createElement("div", _extends({
        key: String(i)
      }, getLineProps({
        line: line,
        key: i,
        className: classNames({
          highlighted: highlightLines.includes(i + 1)
        })
      })), line.map(function (token, key) {
        return /*#__PURE__*/React.createElement("span", _extends({
          key: String(i)
        }, getTokenProps({
          token: token,
          key: key
        })));
      }));
    }));
  }));
};

export default SourceCode;