var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/features/compile/index.ts
var compile_exports = {};
__export(compile_exports, {
  default: () => compile_default
});
module.exports = __toCommonJS(compile_exports);
var import_react = __toESM(require("../../techStacks/react"));
var import_assets = require("../assets");
var compile_default = (api) => {
  api.describe({ key: "dumi:compile" });
  api.register({
    key: "registerTechStack",
    stage: Infinity,
    fn: () => new import_react.default()
  });
  api.modifyConfig((memo) => {
    if (memo.babelLoaderCustomize) {
      api.logger.warn("Config `babelLoaderCustomize` will be override by dumi, please report issue if you need it.");
    }
    memo.babelLoaderCustomize = require.resolve("./babelLoaderCustomize");
    return memo;
  });
  api.chainWebpack(async (memo) => {
    const babelInUmi = memo.module.rule("src").use("babel-loader").entries();
    const techStacks = await api.applyPlugins({
      key: "registerTechStack",
      type: api.ApplyPluginsType.add
    });
    const loaderPath = require.resolve("../../loaders/markdown");
    const loaderBaseOpts = {
      techStacks,
      cwd: api.cwd,
      alias: api.config.alias,
      resolve: api.config.resolve,
      extraRemarkPlugins: api.config.extraRemarkPlugins,
      extraRehypePlugins: api.config.extraRehypePlugins,
      routes: api.appData.routes
    };
    memo.module.rule("dumi-md").type("javascript/auto").test(/\.md$/).oneOf("md-meta").resourceQuery(/meta$/).use("babel-loader").loader(babelInUmi.loader).options(babelInUmi.options).end().use("md-meta-loader").loader(loaderPath).options({
      ...loaderBaseOpts,
      mode: "meta",
      onResolveDemos(demos) {
        const assets = demos.reduce((ret, demo) => {
          if ("asset" in demo)
            ret.push(demo.asset);
          return ret;
        }, []);
        (0, import_assets.addExampleAssets)(assets);
      },
      onResolveAtomMeta: import_assets.addAtomMeta
    }).end().end().oneOf("md").use("babel-loader").loader(babelInUmi.loader).options(babelInUmi.options).end().use("md-loader").loader(loaderPath).options({
      ...loaderBaseOpts,
      builtins: api.service.themeData.builtins
    });
    memo.module.rule("dumi-page").type("javascript/auto").test(/\.(j|t)sx?$/).resourceQuery(/meta$/).use("page-meta-loader").loader(require.resolve("../../loaders/page"));
    memo.module.rule("dumi-demo").type("javascript/auto").test(/\..+$/).enforce("pre").resourceQuery(/techStack/).use("demo-loader").loader(require.resolve("../../loaders/demo")).options({ techStacks, cwd: api.cwd });
    memo.module.rule("dumi-raw").type("javascript/auto").post().resourceQuery(/dumi-raw/).use("raw-loader").loader(require.resolve("raw-loader")).end().use("pre-raw-loader").loader(require.resolve("../../loaders/pre-raw"));
    if (api.env === "development" && memo.plugins.has("fastRefresh")) {
      memo.plugin("fastRefresh").tap(([params]) => [
        {
          ...params,
          include: /\.([cm]js|[jt]sx?|flow|md)$/i
        }
      ]);
    }
    return memo;
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
