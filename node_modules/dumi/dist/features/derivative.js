var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/features/derivative.ts
var derivative_exports = {};
__export(derivative_exports, {
  default: () => derivative_default,
  safeExcludeInMFSU: () => safeExcludeInMFSU
});
module.exports = __toCommonJS(derivative_exports);
var import_constants = require("../constants");
var import_assert = __toESM(require("assert"));
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var import_plugin_utils = require("umi/plugin-utils");
function isMFSUAvailable(api) {
  return process.platform !== "win32" && api.userConfig.mfsu !== false;
}
function safeExcludeInMFSU(api, excludes) {
  if (isMFSUAvailable(api)) {
    api.modifyConfig((memo) => {
      if (memo.mfsu === false)
        return memo;
      else if (memo.mfsu === true)
        memo.mfsu = {};
      memo.mfsu ?? (memo.mfsu = {});
      memo.mfsu.exclude = (0, import_plugin_utils.deepmerge)(memo.mfsu.exclude || [], excludes);
      memo.extraBabelIncludes ?? (memo.extraBabelIncludes = []);
      memo.extraBabelIncludes.push(...excludes);
      return memo;
    });
  }
}
var derivative_default = (api) => {
  api.describe({ key: "dumi:derivative" });
  api.onCheck(() => {
    var _a, _b, _c, _d;
    (0, import_assert.default)(!api.config.mpa, "MPA mode is not supported in dumi!");
    (0, import_assert.default)(!api.config.vite, "Vite mode is not supported yet!");
    (0, import_assert.default)(!api.config.phantomDependency, "PhantomDependency is not supported yet!");
    if (typeof api.config.mfsu === "object") {
      (0, import_assert.default)(api.config.mfsu.strategy !== "eager", "MFSU eager mode is not supported yet!");
      (0, import_assert.default)(api.config.mfsu.esbuild !== true, "MFSU esbuild bundler is not supported yet!");
    }
    (0, import_assert.default)(!api.config.ssr || api.config.ssr.builder === "webpack", "Only `webpack` builder is supported in SSR mode!");
    (0, import_assert.default)(((_a = api.config.cssLoader) == null ? void 0 : _a.modules) === void 0, "CSS Modules is not supported! Because it is not suitable for UI library development, please use normal CSS, Less, etc. instead.");
    if (((_b = api.userConfig.history) == null ? void 0 : _b.type) === "hash") {
      import_plugin_utils.logger.warn("Hash history is temporarily incompatible, it is recommended to use browser history for now.");
    }
    const { themeConfig } = api.config;
    if (themeConfig == null ? void 0 : themeConfig.nav) {
      const hasOrder = !!JSON.stringify(themeConfig.nav).includes('"order":');
      if (hasOrder) {
        import_plugin_utils.logger.warn(`\`order\` is deprecated in \`themeConfig.nav\`, you can order them directly in config`);
      }
    }
    try {
      const tsconfig = require(import_path.default.join(api.cwd, "tsconfig.json"));
      const expected = [".dumi/**/*"];
      if ((_d = (_c = api.service.configManager) == null ? void 0 : _c.mainConfigFile) == null ? void 0 : _d.endsWith(".ts")) {
        expected.push((0, import_plugin_utils.winPath)(import_path.default.relative(api.cwd, api.service.configManager.mainConfigFile)));
      }
      if (!expected.every((f) => {
        var _a2;
        return (_a2 = tsconfig.include) == null ? void 0 : _a2.includes(f);
      })) {
        import_plugin_utils.logger.warn(`Please append ${expected.map((e) => `\`${e}\``).join(" & ")} into \`include\` option of \`tsconfig.json\`, to make sure the types exported by framework works.`);
      }
    } catch {
    }
  });
  safeExcludeInMFSU(api, [
    new RegExp("dumi/dist/client"),
    new RegExp("compiled/_internal/searchWorker")
  ]);
  api.modifyDefaultConfig((memo) => {
    if (!isMFSUAvailable(api)) {
      memo.mfsu = false;
    } else {
      memo.mfsu.strategy = "normal";
      memo.mfsu.shared = {
        react: { singleton: true },
        "react-dom": { singleton: true }
      };
    }
    if (api.userConfig.conventionRoutes !== false) {
      memo.conventionRoutes = {
        base: import_path.default.join(api.cwd, import_constants.LOCAL_PAGES_DIR),
        exclude: [/(\/|^)(\.|_\/)/]
      };
    }
    if (api.userConfig.ssr) {
      memo.ssr = Object.assign(memo.ssr || {}, { builder: "webpack" });
    }
    memo.hash = true;
    memo.exportStatic || (memo.exportStatic = {});
    return memo;
  });
  api.modifyConfig((memo) => {
    var _a;
    if ((_a = api.userConfig.alias) == null ? void 0 : _a["@"]) {
      memo.alias["@"] = api.userConfig.alias["@"];
    } else {
      memo.alias["@"] = (0, import_plugin_utils.winPath)([import_path.default.join(api.cwd, "src"), api.cwd].find(import_fs.default.existsSync));
    }
    return memo;
  });
  api.modifyBabelPresetOpts((memo) => {
    delete memo.pluginAutoCSSModules;
    return memo;
  });
  api.register({
    key: "onGenerateFiles",
    stage: Infinity,
    fn() {
      import_constants.USELESS_TMP_FILES.forEach((file) => {
        import_plugin_utils.fsExtra.rmSync(import_path.default.join(api.paths.absTmpPath, file), { force: true });
      });
      const umiPath = import_path.default.join(api.paths.absTmpPath, "umi.ts");
      import_plugin_utils.fsExtra.writeFileSync(umiPath, import_plugin_utils.fsExtra.readFileSync(umiPath, "utf-8").replace("'@/loading'", "'../loading'"));
      if (api.config.ssr && import_plugin_utils.semver.subset(api.appData.umi.version, "4.0.54 - 4.0.55")) {
        const helmetPath = import_path.default.join(api.paths.absTmpPath, "core/helmet.ts");
        import_plugin_utils.fsExtra.writeFileSync(helmetPath, import_plugin_utils.fsExtra.readFileSync(helmetPath, "utf-8").replace(/(return )(React\.createElement)/, "$1typeof window === 'undefined' ? container : $2"));
      }
    }
  });
  api.registerPlugins([require.resolve("../../compiled/@umijs/plugins")]);
  if (api.isPluginEnable("prepare"))
    api.skipPlugins(["prepare"]);
  if (api.isPluginEnable("routeProps")) {
    api.skipPlugins(["routeProps"]);
    api.onGenerateFiles({
      stage: -Infinity,
      fn() {
        api.writeTmpFile({
          noPluginDir: true,
          path: "core/routeProps.js",
          content: "export default {}"
        });
      }
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  safeExcludeInMFSU
});
