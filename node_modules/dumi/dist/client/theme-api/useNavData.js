function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useFullSidebarData, useLocale, useSiteData } from 'dumi';
import { useState } from 'react';
import { getLocaleNav, pickRouteSortMeta, useLocaleDocRoutes, useRouteDataComparer } from "./utils";

/**
 * hook for get nav data
 */
export var useNavData = function useNavData() {
  var locale = useLocale();
  var routes = useLocaleDocRoutes();

  var _useSiteData = useSiteData(),
      themeConfig = _useSiteData.themeConfig;

  var sidebar = useFullSidebarData();
  var sidebarDataComparer = useRouteDataComparer();

  var _useState = useState(function () {
    // use user config first
    var userNavValue = [];
    var mode;

    if (themeConfig.nav) {
      // 形如：{mode: "append", value: []}
      if ('mode' in themeConfig.nav && typeof themeConfig.nav.mode === 'string') {
        mode = themeConfig.nav.mode;
        userNavValue = getLocaleNav(themeConfig.nav.value, locale);
      } else if (!('mode' in themeConfig.nav)) {
        // 形如：[] 或 {"zh-CN": []}
        userNavValue = getLocaleNav(themeConfig.nav, locale);
      }

      if (!mode || mode === 'override') return userNavValue;
    } // fallback to generate nav data from sidebar data


    var data = Object.entries(sidebar).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          link = _ref2[0],
          groups = _ref2[1];

      var meta = Object.values(routes).reduce(function (ret, route) {
        // find routes which within the nav path
        if (route.path.startsWith(link.slice(1))) {
          pickRouteSortMeta(ret, 'nav', route.meta.frontmatter);
        }

        return ret;
      }, {});
      return {
        title: meta.title || groups[0].title || groups[0].children[0].title,
        order: meta.order || 0,
        link: groups[0].children[0].link,
        activePath: link
      };
    });
    data.sort(sidebarDataComparer); // TODO: 2-level nav data

    if (mode === 'prepend') data.unshift.apply(data, _toConsumableArray(userNavValue));else if (mode === 'append') data.push.apply(data, _toConsumableArray(userNavValue));
    return data;
  }),
      _useState2 = _slicedToArray(_useState, 1),
      nav = _useState2[0];

  return nav;
};