{"value":{"content":"<><div className=\"markdown\"><h2 id=\"reactwindowstickycells\"><a aria-hidden=\"true\" tabIndex=\"-1\" href=\"#reactwindowstickycells\"><span className=\"icon icon-link\" /></a>{\"ReactWindowStickyCells\"}</h2><p>{$$contentTexts[0].value}<br />{$$contentTexts[1].value}<br />{$$contentTexts[2].value}</p><h2 id=\"固定---上\"><a aria-hidden=\"true\" tabIndex=\"-1\" href=\"#固定---上\"><span className=\"icon icon-link\" /></a>{\"固定 - 上\"}</h2></div><DumiDemo {...{\n  \"demo\": {\n    \"id\": \"docs-component-react-window-sticky-cells-demo-demo1\"\n  },\n  \"previewerProps\": {\n    \"filename\": \"docs/component/demo/ReactWindowStickyCells/demo1.tsx\"\n  }\n}} /><div className=\"markdown\"><h2 id=\"固定---右\"><a aria-hidden=\"true\" tabIndex=\"-1\" href=\"#固定---右\"><span className=\"icon icon-link\" /></a>{\"固定 - 右\"}</h2></div><DumiDemo {...{\n  \"demo\": {\n    \"id\": \"docs-component-react-window-sticky-cells-demo-demo2\"\n  },\n  \"previewerProps\": {\n    \"filename\": \"docs/component/demo/ReactWindowStickyCells/demo2.tsx\"\n  }\n}} /><div className=\"markdown\"><h2 id=\"固定---下\"><a aria-hidden=\"true\" tabIndex=\"-1\" href=\"#固定---下\"><span className=\"icon icon-link\" /></a>{\"固定 - 下\"}</h2></div><DumiDemo {...{\n  \"demo\": {\n    \"id\": \"docs-component-react-window-sticky-cells-demo-demo3\"\n  },\n  \"previewerProps\": {\n    \"filename\": \"docs/component/demo/ReactWindowStickyCells/demo3.tsx\"\n  }\n}} /><div className=\"markdown\"><h2 id=\"固定---左\"><a aria-hidden=\"true\" tabIndex=\"-1\" href=\"#固定---左\"><span className=\"icon icon-link\" /></a>{\"固定 - 左\"}</h2></div><DumiDemo {...{\n  \"demo\": {\n    \"id\": \"docs-component-react-window-sticky-cells-demo-demo4\"\n  },\n  \"previewerProps\": {\n    \"filename\": \"docs/component/demo/ReactWindowStickyCells/demo4.tsx\"\n  }\n}} /><div className=\"markdown\"><h2 id=\"固定---上左\"><a aria-hidden=\"true\" tabIndex=\"-1\" href=\"#固定---上左\"><span className=\"icon icon-link\" /></a>{\"固定 - 上左\"}</h2></div><DumiDemo {...{\n  \"demo\": {\n    \"id\": \"docs-component-react-window-sticky-cells-demo-demo5\"\n  },\n  \"previewerProps\": {\n    \"filename\": \"docs/component/demo/ReactWindowStickyCells/demo5.tsx\"\n  }\n}} /><div className=\"markdown\"><h2 id=\"固定---下右\"><a aria-hidden=\"true\" tabIndex=\"-1\" href=\"#固定---下右\"><span className=\"icon icon-link\" /></a>{\"固定 - 下右\"}</h2></div><DumiDemo {...{\n  \"demo\": {\n    \"id\": \"docs-component-react-window-sticky-cells-demo-demo6\"\n  },\n  \"previewerProps\": {\n    \"filename\": \"docs/component/demo/ReactWindowStickyCells/demo6.tsx\"\n  }\n}} /><div className=\"markdown\"><h2 id=\"固定---上下左右\"><a aria-hidden=\"true\" tabIndex=\"-1\" href=\"#固定---上下左右\"><span className=\"icon icon-link\" /></a>{\"固定 - 上下左右\"}</h2></div><DumiDemo {...{\n  \"demo\": {\n    \"id\": \"docs-component-react-window-sticky-cells-demo-demo7\"\n  },\n  \"previewerProps\": {\n    \"filename\": \"docs/component/demo/ReactWindowStickyCells/demo7.tsx\"\n  }\n}} /><div className=\"markdown\"><h2 id=\"api\"><a aria-hidden=\"true\" tabIndex=\"-1\" href=\"#api\"><span className=\"icon icon-link\" /></a>{\"API\"}</h2><p>{$$contentTexts[3].value}<br /><a href=\"https://react-window.vercel.app/#/api/VariableSizeGrid\">{$$contentTexts[4].value}</a></p><p>{$$contentTexts[5].value}<br /><strong>{$$contentTexts[6].value}</strong></p><SourceCode>{$$contentTexts[7].value}</SourceCode></div></>","meta":{"embeds":[],"frontmatter":{"title":"ReactWindowStickyCells","toc":"content","filename":"docs/component/ReactWindowStickyCells.md","order":3,"description":"react-window 是一个用于高效呈现大型列表和表格数据的 React 库\n但是这个库本身并不直接支持固定表格行列\nReactWindowStickyCells 组件是对 react-window 的一个扩展，使其能够支持通过参数化控制上右下左 4 个方向的 sticky 布局"},"demos":[{"id":"docs-component-react-window-sticky-cells-demo-demo1","component":"React.lazy(() => import( /* webpackChunkName: \"demos\" */ '/Users/jxd/Desktop/前端项目/前端项目/react-window-table/docs/component/demo/ReactWindowStickyCells/demo1.tsx?techStack=react'))","asset":{"type":"BLOCK","id":"docs-component-react-window-sticky-cells-demo-demo1","refAtomIds":[],"dependencies":{"index.tsx":{"type":"FILE","value":"import { ReactWindowStickyCells } from 'oulae_dumi_component_web';\nimport * as React from 'react';\n\n// 表示横轴表头的数据\nconst columns = (() => {\n  const result = [];\n  for (let i = 0; i < 20; i++) {\n    result.push({\n      title: `key_${i}`,\n      dataIndex: `key_${i}`,\n      width: 75 + Math.round(Math.random() * 50),\n      render: (text) => {\n        return text;\n      },\n    });\n  }\n\n  return result;\n})();\n\n// 表示纵轴的数据\nconst sourceData = (() => {\n  const result = [];\n  for (let i = 0; i < 40; i++) {\n    const obj = {\n      height: 25 + Math.round(Math.random() * 50),\n    };\n    for (let k = 0; k < 20; k++) {\n      obj[`key_${k}`] = `${i}_${k}`;\n    }\n    result.push(obj);\n  }\n\n  return result;\n})();\n\nconst getColumnsWidth = (index) => {\n  return columns[index].width;\n};\n\nconst getRowHeight = (index) => {\n  if (index === 0) {\n    return 75;\n  } else {\n    return sourceData[index - 1].height;\n  }\n};\n\nconst Cell = ({ columnIndex, rowIndex, style }) => {\n  if (rowIndex === 0) {\n    // 表头的渲染\n    return (\n      <div\n        style={{\n          ...style,\n          background: '#fff',\n        }}\n      >\n        {columns[columnIndex].title}\n      </div>\n    );\n  } else {\n    // 表体的渲染\n    const curObj = sourceData[rowIndex - 1];\n    const dataIndex = columns[columnIndex].dataIndex;\n    const text = curObj[dataIndex];\n    return (\n      <div\n        data-column-index={columnIndex}\n        data-row-index={rowIndex - 1}\n        style={{\n          ...style,\n          background: '#fff',\n        }}\n      >\n        {columns[columnIndex].render(text, curObj)}\n      </div>\n    );\n  }\n};\n\nconst HomePage: React.FC = () => {\n  return (\n    <div>\n      <ReactWindowStickyCells\n        className=\"Grid\"\n        height={600}\n        /**\n         * Q: 为什么 rowCount 这里需要 +1，而 columnCount 却不需要呢？\n         * A:\n         * columns 提供的是列head的数据\n         * sourceData 提供行的数据\n         * 第 1 行需要默认展示 columns，所以这里需要 +1\n         */\n        // 列\n        columnCount={columns.length}\n        // 行\n        rowCount={sourceData.length + 1}\n        columnWidth={getColumnsWidth}\n        rowHeight={getRowHeight}\n        width={600}\n        fixedStyle={{\n          top: 2,\n        }}\n      >\n        {Cell}\n      </ReactWindowStickyCells>\n    </div>\n  );\n};\n\nexport default HomePage;\n"},"react":{"type":"NPM","value":"18.2.0"}}},"sources":{"index.tsx":"/Users/jxd/Desktop/前端项目/前端项目/react-window-table/docs/component/demo/ReactWindowStickyCells/demo1.tsx"}},{"id":"docs-component-react-window-sticky-cells-demo-demo2","component":"React.lazy(() => import( /* webpackChunkName: \"demos\" */ '/Users/jxd/Desktop/前端项目/前端项目/react-window-table/docs/component/demo/ReactWindowStickyCells/demo2.tsx?techStack=react'))","asset":{"type":"BLOCK","id":"docs-component-react-window-sticky-cells-demo-demo2","refAtomIds":[],"dependencies":{"index.tsx":{"type":"FILE","value":"import { ReactWindowStickyCells } from 'oulae_dumi_component_web';\nimport * as React from 'react';\n\n// 表示横轴表头的数据\nconst columns = (() => {\n  const result = [];\n  for (let i = 0; i < 20; i++) {\n    result.push({\n      title: `key_${i}`,\n      dataIndex: `key_${i}`,\n      width: 75 + Math.round(Math.random() * 50),\n      render: (text) => {\n        return text;\n      },\n    });\n  }\n\n  return result;\n})();\n\n// 表示纵轴的数据\nconst sourceData = (() => {\n  const result = [];\n  for (let i = 0; i < 40; i++) {\n    const obj = {\n      height: 25 + Math.round(Math.random() * 50),\n    };\n    for (let k = 0; k < 20; k++) {\n      obj[`key_${k}`] = `${i}_${k}`;\n    }\n    result.push(obj);\n  }\n\n  return result;\n})();\n\nconst getColumnsWidth = (index) => {\n  return columns[index].width;\n};\n\nconst getRowHeight = (index) => {\n  if (index === 0) {\n    return 75;\n  } else {\n    return sourceData[index - 1].height;\n  }\n};\n\nconst Cell = ({ columnIndex, rowIndex, style }) => {\n  if (rowIndex === 0) {\n    // 表头的渲染\n    return (\n      <div\n        style={{\n          ...style,\n          background: '#fff',\n        }}\n      >\n        {columns[columnIndex].title}\n      </div>\n    );\n  } else {\n    // 表体的渲染\n    const curObj = sourceData[rowIndex - 1];\n    const dataIndex = columns[columnIndex].dataIndex;\n    const text = curObj[dataIndex];\n    return (\n      <div\n        data-column-index={columnIndex}\n        data-row-index={rowIndex - 1}\n        style={{\n          ...style,\n          background: '#fff',\n        }}\n      >\n        {columns[columnIndex].render(text, curObj)}\n      </div>\n    );\n  }\n};\n\nconst HomePage: React.FC = () => {\n  return (\n    <div>\n      <ReactWindowStickyCells\n        className=\"Grid\"\n        height={600}\n        /**\n         * Q: 为什么 rowCount 这里需要 +1，而 columnCount 却不需要呢？\n         * A:\n         * columns 提供的是列head的数据\n         * sourceData 提供行的数据\n         * 第 1 行需要默认展示 columns，所以这里需要 +1\n         */\n        // 列\n        columnCount={columns.length}\n        // 行\n        rowCount={sourceData.length + 1}\n        columnWidth={getColumnsWidth}\n        rowHeight={getRowHeight}\n        width={600}\n        fixedStyle={{\n          right: 2,\n        }}\n      >\n        {Cell}\n      </ReactWindowStickyCells>\n    </div>\n  );\n};\n\nexport default HomePage;\n"},"react":{"type":"NPM","value":"18.2.0"}}},"sources":{"index.tsx":"/Users/jxd/Desktop/前端项目/前端项目/react-window-table/docs/component/demo/ReactWindowStickyCells/demo2.tsx"}},{"id":"docs-component-react-window-sticky-cells-demo-demo3","component":"React.lazy(() => import( /* webpackChunkName: \"demos\" */ '/Users/jxd/Desktop/前端项目/前端项目/react-window-table/docs/component/demo/ReactWindowStickyCells/demo3.tsx?techStack=react'))","asset":{"type":"BLOCK","id":"docs-component-react-window-sticky-cells-demo-demo3","refAtomIds":[],"dependencies":{"index.tsx":{"type":"FILE","value":"import { ReactWindowStickyCells } from 'oulae_dumi_component_web';\nimport * as React from 'react';\n\n// 表示横轴表头的数据\nconst columns = (() => {\n  const result = [];\n  for (let i = 0; i < 20; i++) {\n    result.push({\n      title: `key_${i}`,\n      dataIndex: `key_${i}`,\n      width: 75 + Math.round(Math.random() * 50),\n      render: (text) => {\n        return text;\n      },\n    });\n  }\n\n  return result;\n})();\n\n// 表示纵轴的数据\nconst sourceData = (() => {\n  const result = [];\n  for (let i = 0; i < 40; i++) {\n    const obj = {\n      height: 25 + Math.round(Math.random() * 50),\n    };\n    for (let k = 0; k < 20; k++) {\n      obj[`key_${k}`] = `${i}_${k}`;\n    }\n    result.push(obj);\n  }\n\n  return result;\n})();\n\nconst getColumnsWidth = (index) => {\n  return columns[index].width;\n};\n\nconst getRowHeight = (index) => {\n  if (index === 0) {\n    return 75;\n  } else {\n    return sourceData[index - 1].height;\n  }\n};\n\nconst Cell = ({ columnIndex, rowIndex, style }) => {\n  if (rowIndex === 0) {\n    // 表头的渲染\n    return (\n      <div\n        style={{\n          ...style,\n          background: '#fff',\n        }}\n      >\n        {columns[columnIndex].title}\n      </div>\n    );\n  } else {\n    // 表体的渲染\n    const curObj = sourceData[rowIndex - 1];\n    const dataIndex = columns[columnIndex].dataIndex;\n    const text = curObj[dataIndex];\n    return (\n      <div\n        data-column-index={columnIndex}\n        data-row-index={rowIndex - 1}\n        style={{\n          ...style,\n          background: '#fff',\n        }}\n      >\n        {columns[columnIndex].render(text, curObj)}\n      </div>\n    );\n  }\n};\n\nconst HomePage: React.FC = () => {\n  return (\n    <div>\n      <ReactWindowStickyCells\n        className=\"Grid\"\n        height={600}\n        /**\n         * Q: 为什么 rowCount 这里需要 +1，而 columnCount 却不需要呢？\n         * A:\n         * columns 提供的是列head的数据\n         * sourceData 提供行的数据\n         * 第 1 行需要默认展示 columns，所以这里需要 +1\n         */\n        // 列\n        columnCount={columns.length}\n        // 行\n        rowCount={sourceData.length + 1}\n        columnWidth={getColumnsWidth}\n        rowHeight={getRowHeight}\n        width={600}\n        fixedStyle={{\n          bottom: 2,\n        }}\n      >\n        {Cell}\n      </ReactWindowStickyCells>\n    </div>\n  );\n};\n\nexport default HomePage;\n"},"react":{"type":"NPM","value":"18.2.0"}}},"sources":{"index.tsx":"/Users/jxd/Desktop/前端项目/前端项目/react-window-table/docs/component/demo/ReactWindowStickyCells/demo3.tsx"}},{"id":"docs-component-react-window-sticky-cells-demo-demo4","component":"React.lazy(() => import( /* webpackChunkName: \"demos\" */ '/Users/jxd/Desktop/前端项目/前端项目/react-window-table/docs/component/demo/ReactWindowStickyCells/demo4.tsx?techStack=react'))","asset":{"type":"BLOCK","id":"docs-component-react-window-sticky-cells-demo-demo4","refAtomIds":[],"dependencies":{"index.tsx":{"type":"FILE","value":"import { ReactWindowStickyCells } from 'oulae_dumi_component_web';\nimport * as React from 'react';\n\n// 表示横轴表头的数据\nconst columns = (() => {\n  const result = [];\n  for (let i = 0; i < 20; i++) {\n    result.push({\n      title: `key_${i}`,\n      dataIndex: `key_${i}`,\n      width: 75 + Math.round(Math.random() * 50),\n      render: (text) => {\n        return text;\n      },\n    });\n  }\n\n  return result;\n})();\n\n// 表示纵轴的数据\nconst sourceData = (() => {\n  const result = [];\n  for (let i = 0; i < 40; i++) {\n    const obj = {\n      height: 25 + Math.round(Math.random() * 50),\n    };\n    for (let k = 0; k < 20; k++) {\n      obj[`key_${k}`] = `${i}_${k}`;\n    }\n    result.push(obj);\n  }\n\n  return result;\n})();\n\nconst getColumnsWidth = (index) => {\n  return columns[index].width;\n};\n\nconst getRowHeight = (index) => {\n  if (index === 0) {\n    return 75;\n  } else {\n    return sourceData[index - 1].height;\n  }\n};\n\nconst Cell = ({ columnIndex, rowIndex, style }) => {\n  if (rowIndex === 0) {\n    // 表头的渲染\n    return (\n      <div\n        style={{\n          ...style,\n          background: '#fff',\n        }}\n      >\n        {columns[columnIndex].title}\n      </div>\n    );\n  } else {\n    // 表体的渲染\n    const curObj = sourceData[rowIndex - 1];\n    const dataIndex = columns[columnIndex].dataIndex;\n    const text = curObj[dataIndex];\n    return (\n      <div\n        data-column-index={columnIndex}\n        data-row-index={rowIndex - 1}\n        style={{\n          ...style,\n          background: '#fff',\n        }}\n      >\n        {columns[columnIndex].render(text, curObj)}\n      </div>\n    );\n  }\n};\n\nconst HomePage: React.FC = () => {\n  return (\n    <div>\n      <ReactWindowStickyCells\n        className=\"Grid\"\n        height={600}\n        /**\n         * Q: 为什么 rowCount 这里需要 +1，而 columnCount 却不需要呢？\n         * A:\n         * columns 提供的是列head的数据\n         * sourceData 提供行的数据\n         * 第 1 行需要默认展示 columns，所以这里需要 +1\n         */\n        // 列\n        columnCount={columns.length}\n        // 行\n        rowCount={sourceData.length + 1}\n        columnWidth={getColumnsWidth}\n        rowHeight={getRowHeight}\n        width={600}\n        fixedStyle={{\n          left: 2,\n        }}\n      >\n        {Cell}\n      </ReactWindowStickyCells>\n    </div>\n  );\n};\n\nexport default HomePage;\n"},"react":{"type":"NPM","value":"18.2.0"}}},"sources":{"index.tsx":"/Users/jxd/Desktop/前端项目/前端项目/react-window-table/docs/component/demo/ReactWindowStickyCells/demo4.tsx"}},{"id":"docs-component-react-window-sticky-cells-demo-demo5","component":"React.lazy(() => import( /* webpackChunkName: \"demos\" */ '/Users/jxd/Desktop/前端项目/前端项目/react-window-table/docs/component/demo/ReactWindowStickyCells/demo5.tsx?techStack=react'))","asset":{"type":"BLOCK","id":"docs-component-react-window-sticky-cells-demo-demo5","refAtomIds":[],"dependencies":{"index.tsx":{"type":"FILE","value":"import { ReactWindowStickyCells } from 'oulae_dumi_component_web';\nimport * as React from 'react';\n\n// 表示横轴表头的数据\nconst columns = (() => {\n  const result = [];\n  for (let i = 0; i < 20; i++) {\n    result.push({\n      title: `key_${i}`,\n      dataIndex: `key_${i}`,\n      width: 75 + Math.round(Math.random() * 50),\n      render: (text) => {\n        return text;\n      },\n    });\n  }\n\n  return result;\n})();\n\n// 表示纵轴的数据\nconst sourceData = (() => {\n  const result = [];\n  for (let i = 0; i < 40; i++) {\n    const obj = {\n      height: 25 + Math.round(Math.random() * 50),\n    };\n    for (let k = 0; k < 20; k++) {\n      obj[`key_${k}`] = `${i}_${k}`;\n    }\n    result.push(obj);\n  }\n\n  return result;\n})();\n\nconst getColumnsWidth = (index) => {\n  return columns[index].width;\n};\n\nconst getRowHeight = (index) => {\n  if (index === 0) {\n    return 75;\n  } else {\n    return sourceData[index - 1].height;\n  }\n};\n\nconst Cell = ({ columnIndex, rowIndex, style }) => {\n  if (rowIndex === 0) {\n    // 表头的渲染\n    return (\n      <div\n        style={{\n          ...style,\n          background: '#fff',\n        }}\n      >\n        {columns[columnIndex].title}\n      </div>\n    );\n  } else {\n    // 表体的渲染\n    const curObj = sourceData[rowIndex - 1];\n    const dataIndex = columns[columnIndex].dataIndex;\n    const text = curObj[dataIndex];\n    return (\n      <div\n        data-column-index={columnIndex}\n        data-row-index={rowIndex - 1}\n        style={{\n          ...style,\n          background: '#fff',\n        }}\n      >\n        {columns[columnIndex].render(text, curObj)}\n      </div>\n    );\n  }\n};\n\nconst HomePage: React.FC = () => {\n  return (\n    <div>\n      <ReactWindowStickyCells\n        className=\"Grid\"\n        height={600}\n        /**\n         * Q: 为什么 rowCount 这里需要 +1，而 columnCount 却不需要呢？\n         * A:\n         * columns 提供的是列head的数据\n         * sourceData 提供行的数据\n         * 第 1 行需要默认展示 columns，所以这里需要 +1\n         */\n        // 列\n        columnCount={columns.length}\n        // 行\n        rowCount={sourceData.length + 1}\n        columnWidth={getColumnsWidth}\n        rowHeight={getRowHeight}\n        width={600}\n        fixedStyle={{\n          top: 2,\n          left: 1,\n        }}\n      >\n        {Cell}\n      </ReactWindowStickyCells>\n    </div>\n  );\n};\n\nexport default HomePage;\n"},"react":{"type":"NPM","value":"18.2.0"}}},"sources":{"index.tsx":"/Users/jxd/Desktop/前端项目/前端项目/react-window-table/docs/component/demo/ReactWindowStickyCells/demo5.tsx"}},{"id":"docs-component-react-window-sticky-cells-demo-demo6","component":"React.lazy(() => import( /* webpackChunkName: \"demos\" */ '/Users/jxd/Desktop/前端项目/前端项目/react-window-table/docs/component/demo/ReactWindowStickyCells/demo6.tsx?techStack=react'))","asset":{"type":"BLOCK","id":"docs-component-react-window-sticky-cells-demo-demo6","refAtomIds":[],"dependencies":{"index.tsx":{"type":"FILE","value":"import { ReactWindowStickyCells } from 'oulae_dumi_component_web';\nimport * as React from 'react';\n\n// 表示横轴表头的数据\nconst columns = (() => {\n  const result = [];\n  for (let i = 0; i < 20; i++) {\n    result.push({\n      title: `key_${i}`,\n      dataIndex: `key_${i}`,\n      width: 75 + Math.round(Math.random() * 50),\n      render: (text) => {\n        return text;\n      },\n    });\n  }\n\n  return result;\n})();\n\n// 表示纵轴的数据\nconst sourceData = (() => {\n  const result = [];\n  for (let i = 0; i < 40; i++) {\n    const obj = {\n      height: 25 + Math.round(Math.random() * 50),\n    };\n    for (let k = 0; k < 20; k++) {\n      obj[`key_${k}`] = `${i}_${k}`;\n    }\n    result.push(obj);\n  }\n\n  return result;\n})();\n\nconst getColumnsWidth = (index) => {\n  return columns[index].width;\n};\n\nconst getRowHeight = (index) => {\n  if (index === 0) {\n    return 75;\n  } else {\n    return sourceData[index - 1].height;\n  }\n};\n\nconst Cell = ({ columnIndex, rowIndex, style }) => {\n  if (rowIndex === 0) {\n    // 表头的渲染\n    return (\n      <div\n        style={{\n          ...style,\n          background: '#fff',\n        }}\n      >\n        {columns[columnIndex].title}\n      </div>\n    );\n  } else {\n    // 表体的渲染\n    const curObj = sourceData[rowIndex - 1];\n    const dataIndex = columns[columnIndex].dataIndex;\n    const text = curObj[dataIndex];\n    return (\n      <div\n        data-column-index={columnIndex}\n        data-row-index={rowIndex - 1}\n        style={{\n          ...style,\n          background: '#fff',\n        }}\n      >\n        {columns[columnIndex].render(text, curObj)}\n      </div>\n    );\n  }\n};\n\nconst HomePage: React.FC = () => {\n  return (\n    <div>\n      <ReactWindowStickyCells\n        className=\"Grid\"\n        height={600}\n        /**\n         * Q: 为什么 rowCount 这里需要 +1，而 columnCount 却不需要呢？\n         * A:\n         * columns 提供的是列head的数据\n         * sourceData 提供行的数据\n         * 第 1 行需要默认展示 columns，所以这里需要 +1\n         */\n        // 列\n        columnCount={columns.length}\n        // 行\n        rowCount={sourceData.length + 1}\n        columnWidth={getColumnsWidth}\n        rowHeight={getRowHeight}\n        width={600}\n        fixedStyle={{\n          right: 2,\n          bottom: 1,\n        }}\n      >\n        {Cell}\n      </ReactWindowStickyCells>\n    </div>\n  );\n};\n\nexport default HomePage;\n"},"react":{"type":"NPM","value":"18.2.0"}}},"sources":{"index.tsx":"/Users/jxd/Desktop/前端项目/前端项目/react-window-table/docs/component/demo/ReactWindowStickyCells/demo6.tsx"}},{"id":"docs-component-react-window-sticky-cells-demo-demo7","component":"React.lazy(() => import( /* webpackChunkName: \"demos\" */ '/Users/jxd/Desktop/前端项目/前端项目/react-window-table/docs/component/demo/ReactWindowStickyCells/demo7.tsx?techStack=react'))","asset":{"type":"BLOCK","id":"docs-component-react-window-sticky-cells-demo-demo7","refAtomIds":[],"dependencies":{"index.tsx":{"type":"FILE","value":"import { ReactWindowStickyCells } from 'oulae_dumi_component_web';\nimport * as React from 'react';\n\n// 表示横轴表头的数据\nconst columns = (() => {\n  const result = [];\n  for (let i = 0; i < 20; i++) {\n    result.push({\n      title: `key_${i}`,\n      dataIndex: `key_${i}`,\n      width: 75 + Math.round(Math.random() * 50),\n      render: (text) => {\n        return text;\n      },\n    });\n  }\n\n  return result;\n})();\n\n// 表示纵轴的数据\nconst sourceData = (() => {\n  const result = [];\n  for (let i = 0; i < 40; i++) {\n    const obj = {\n      height: 25 + Math.round(Math.random() * 50),\n    };\n    for (let k = 0; k < 20; k++) {\n      obj[`key_${k}`] = `${i}_${k}`;\n    }\n    result.push(obj);\n  }\n\n  return result;\n})();\n\nconst getColumnsWidth = (index) => {\n  return columns[index].width;\n};\n\nconst getRowHeight = (index) => {\n  if (index === 0) {\n    return 75;\n  } else {\n    return sourceData[index - 1].height;\n  }\n};\n\nconst Cell = ({ columnIndex, rowIndex, style }) => {\n  if (rowIndex === 0) {\n    // 表头的渲染\n    return (\n      <div\n        style={{\n          ...style,\n          background: '#fff',\n        }}\n      >\n        {columns[columnIndex].title}\n      </div>\n    );\n  } else {\n    // 表体的渲染\n    const curObj = sourceData[rowIndex - 1];\n    const dataIndex = columns[columnIndex].dataIndex;\n    const text = curObj[dataIndex];\n    return (\n      <div\n        data-column-index={columnIndex}\n        data-row-index={rowIndex - 1}\n        style={{\n          ...style,\n          background: '#fff',\n        }}\n      >\n        {columns[columnIndex].render(text, curObj)}\n      </div>\n    );\n  }\n};\n\nconst HomePage: React.FC = () => {\n  return (\n    <div>\n      <ReactWindowStickyCells\n        className=\"Grid\"\n        height={600}\n        /**\n         * Q: 为什么 rowCount 这里需要 +1，而 columnCount 却不需要呢？\n         * A:\n         * columns 提供的是列head的数据\n         * sourceData 提供行的数据\n         * 第 1 行需要默认展示 columns，所以这里需要 +1\n         */\n        // 列\n        columnCount={columns.length}\n        // 行\n        rowCount={sourceData.length + 1}\n        columnWidth={getColumnsWidth}\n        rowHeight={getRowHeight}\n        width={600}\n        fixedStyle={{\n          top: 2,\n          right: 2,\n          left: 2,\n          bottom: 2,\n        }}\n      >\n        {Cell}\n      </ReactWindowStickyCells>\n    </div>\n  );\n};\n\nexport default HomePage;\n"},"react":{"type":"NPM","value":"18.2.0"}}},"sources":{"index.tsx":"/Users/jxd/Desktop/前端项目/前端项目/react-window-table/docs/component/demo/ReactWindowStickyCells/demo7.tsx"}}],"toc":[{"id":"reactwindowstickycells","depth":2,"title":"ReactWindowStickyCells"},{"id":"固定---上","depth":2,"title":"固定 - 上"},{"id":"固定---右","depth":2,"title":"固定 - 右"},{"id":"固定---下","depth":2,"title":"固定 - 下"},{"id":"固定---左","depth":2,"title":"固定 - 左"},{"id":"固定---上左","depth":2,"title":"固定 - 上左"},{"id":"固定---下右","depth":2,"title":"固定 - 下右"},{"id":"固定---上下左右","depth":2,"title":"固定 - 上下左右"},{"id":"api","depth":2,"title":"API"}],"texts":[{"value":"react-window 是一个用于高效呈现大型列表和表格数据的 React 库","paraId":0,"tocIndex":0},{"value":"\n但是这个库本身并不直接支持固定表格行列","paraId":0,"tocIndex":0},{"value":"\nReactWindowStickyCells 组件是对 react-window 的一个扩展，使其能够支持通过参数化控制上右下左 4 个方向的 sticky 布局","paraId":0,"tocIndex":0},{"value":"由于该组件拓展自 react-window 的 VariableSizeGrid 组件因此支持 react-window VariableSizeGrid 组件的所有参数","paraId":1,"tocIndex":8},{"value":"react-window VariableSizeGrid 参数列表","paraId":1,"tocIndex":8},{"value":"除此之外，在 ReactWindowStickyCells 组件中，我们使用 fixedStyle 参数来控制 sticky 布局","paraId":2,"tocIndex":8},{"value":"具体可以参见上述 demo","paraId":2,"tocIndex":8},{"value":"\nfixedStyle: {\n  top: number | undefined;\n  right: number | undefined;\n  bottom: number | undefined;\n  left: number | undefined;\n}\n","paraId":3,"tocIndex":8}]}},"type":"Object"}