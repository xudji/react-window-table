var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/config/stylelint/index.ts
module.exports = {
  extends: [
    require.resolve("stylelint-config-standard"),
    require.resolve("../../../compiled/stylelint-config-prettier"),
    require.resolve("../../../compiled/stylelint-config-css-modules")
  ],
  plugins: [
    require.resolve("../../../compiled/stylelint-declaration-block-no-ignored-properties")
  ],
  rules: {
    "no-descending-specificity": null,
    "function-url-quotes": "always",
    "selector-attribute-quotes": "always",
    "font-family-no-missing-generic-family-keyword": null,
    // iconfont
    "plugin/declaration-block-no-ignored-properties": true,
    "unit-no-unknown": [true, { ignoreUnits: ["rpx"] }],
    // webcomponent
    "selector-type-no-unknown": null,
    "value-keyword-case": ["lower", { ignoreProperties: ["composes"] }],
    "selector-class-pattern": [
      "^([a-z][a-z0-9]*(-[a-z0-9]+)*|[a-z][a-zA-Z0-9]+)$",
      {
        message: "Expected class selector to be kebab-case or lowerCamelCase"
      }
    ]
  },
  customSyntax: require.resolve("../../../compiled/postcss-less"),
  ignoreFiles: ["node_modules"],
  overrides: [
    {
      files: ["**/*.js", "**/*.jsx", "**/*.ts", "**/*.tsx"],
      customSyntax: require.resolve("@stylelint/postcss-css-in-js")
    }
  ]
};
