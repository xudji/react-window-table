var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/features/ssr/ssr.ts
var ssr_exports = {};
__export(ssr_exports, {
  default: () => ssr_default
});
module.exports = __toCommonJS(ssr_exports);
var import_types = require("@umijs/core/dist/types");
var import_utils = require("@umijs/utils");
var import_assert = __toESM(require("assert"));
var import_fs = require("fs");
var import_path = require("path");
var import_utils2 = require("./utils");
var ssr_default = (api) => {
  const esbuildBuilder = (0, import_utils.importLazy)(
    require.resolve("./builder/builder")
  );
  const webpackBuilder = (0, import_utils.importLazy)(
    require.resolve("./webpack/webpack")
  );
  api.describe({
    key: "ssr",
    config: {
      schema({ zod }) {
        return zod.object({
          serverBuildPath: zod.string(),
          platform: zod.string(),
          builder: zod.enum(["esbuild", "webpack"])
        }).deepPartial();
      }
    },
    enableBy: import_types.EnableBy.config
  });
  api.onCheck(() => {
    const reactVersion = parseInt(api.appData.react.version.split(".")[0], 10) || 0;
    if (reactVersion < 18) {
      throw new Error(
        `SSR requires React version >= 18.0.0, but got ${reactVersion}.`
      );
    }
  });
  api.onStart(() => {
    import_utils.logger.warn(`SSR feature is in beta, may be unstable`);
  });
  api.addMiddlewares(() => [
    async (req, res, next) => {
      const modulePath = (0, import_utils2.absServerBuildPath)(api);
      if ((0, import_fs.existsSync)(modulePath)) {
        delete require.cache[modulePath];
        (await require(modulePath)).default(req, res, next);
      } else {
        res.end("umi.server.js is compiling ...");
      }
    }
  ]);
  api.onGenerateFiles(() => {
    api.writeTmpFile({
      noPluginDir: true,
      path: "ssr/react-shim.js",
      content: `
      import * as React from 'react';
export { React };
`
    });
  });
  api.onBeforeCompiler(async ({ opts }) => {
    const { builder = "esbuild" } = api.config.ssr;
    if (builder === "esbuild") {
      await esbuildBuilder.build({
        api,
        watch: api.env === "development"
      });
    } else if (builder === "webpack") {
      (0, import_assert.default)(
        !api.config.vite,
        `The \`vite\` config is now allowed when \`ssr.builder\` is webpack!`
      );
      await webpackBuilder.build(api, opts);
    }
  });
  api.onBuildComplete(async ({ err }) => {
    if (err)
      return;
    if (api.config.ssr.platform === "vercel") {
      const jsonFile = (0, import_path.join)(api.cwd, "vercel.json");
      const json = (0, import_fs.existsSync)(jsonFile) ? import_utils.fsExtra.readJSONSync(jsonFile) : {};
      json.routes = (json.routes || []).filter((route) => {
        return !["/", "/__serverLoader"].includes(route.src);
      });
      json.routes.push({ src: "/", dest: "/api/umi.server" });
      json.routes.push({ src: "/__serverLoader", dest: "/api/umi.server" });
      (0, import_fs.writeFileSync)(jsonFile, JSON.stringify(json, null, 2));
      import_utils.logger.info(`[SSR] vercel.json updated`);
      (0, import_fs.writeFileSync)(
        (0, import_path.join)(api.cwd, "api/umi.server.js"),
        `
export default function handler(request, response) {
  require('../server/umi.server.js').default(request, response);
}
      `.trimStart(),
        "utf-8"
      );
      import_utils.logger.info(`[SSR] write api/umi.server.js`);
    }
  });
  const pluginName = "ProcessAssetsPlugin";
  class ProcessAssetsPlugin {
    apply(compiler) {
      compiler.hooks.compilation.tap(pluginName, (compilation) => {
        compilation.hooks.afterProcessAssets.tap(pluginName, () => {
          const modulePath = (0, import_utils2.absServerBuildPath)(api);
          delete require.cache[modulePath];
        });
      });
    }
  }
  api.modifyWebpackConfig((config) => {
    var _a;
    config.plugins.push(new ProcessAssetsPlugin());
    config.optimization = {
      ...config.optimization,
      splitChunks: {
        ...(_a = config.optimization) == null ? void 0 : _a.splitChunks,
        cacheGroups: {
          styles: {
            // TODO: no umi specified
            name: "umi",
            test: /\.(less|css|scss|sass)$/,
            chunks: "all",
            minChunks: 1,
            reuseExistingChunk: true,
            enforce: true
          }
        }
      }
    };
    return config;
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
