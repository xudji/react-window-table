var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/features/lowImport/lowImport.ts
var lowImport_exports = {};
__export(lowImport_exports, {
  default: () => lowImport_default
});
module.exports = __toCommonJS(lowImport_exports);
var import_fs = require("fs");
var import_path = require("path");
var import_babelPlugin = __toESM(require("./babelPlugin"));
var umiImportItems = [
  "createSearchParams",
  "Link",
  "matchPath",
  "matchRoutes",
  "NavLink",
  "Outlet",
  "renderClient",
  "useAppData",
  "useLocation",
  "useMatch",
  "useNavigate",
  "useOutlet",
  "useParams",
  "useResolvedPath",
  "useRouteData",
  "useRoutes",
  "useSearchParams"
  // TODO: 这两个似乎从 umi 引入不了
  //'ApplyPluginsType',
  //'PluginManager',
];
var reactImportItems = [
  "createElement",
  "createFactory",
  "cloneElement",
  "isValidElement",
  "createRef",
  "forwardRef",
  // hooks
  "useState",
  "useEffect",
  "useContext",
  "useReducer",
  "useCallback",
  "useMemo",
  "useRef",
  "useImperativeHandle",
  "useLayoutEffect",
  "useDebugValue"
];
var lowImport_default = (api) => {
  api.describe({
    key: "lowImport",
    config: {
      schema({ zod }) {
        return zod.object({
          libs: zod.array(zod.any()),
          css: zod.string()
        }).deepPartial();
      }
    },
    enableBy: api.EnableBy.config
  });
  api.modifyAppData(async (memo) => {
    memo.lowImport = [
      await api.applyPlugins({
        key: "addLowImportLibs",
        initialValue: []
      }),
      ...api.config.lowImport.libs || []
    ];
  });
  api.onStart(() => {
    const dts = api.appData.lowImport.map((lib) => {
      if (lib.withObj) {
        const memberDts = (lib.members || []).map(
          (member) => `${member}: typeof import('${lib.importFrom}')['${member}'],`
        ).join("\n");
        return `const ${lib.withObj} : {
${memberDts}
};`;
      } else if (lib.namespaceImport) {
        return `const ${lib.namespaceImport}: typeof import('${lib.importFrom}');`;
      } else if (lib.defaultImport) {
        return `const ${lib.defaultImport}: typeof import('${lib.importFrom}')['default'];`;
      } else {
        return (lib.members || []).map(
          (member) => `const ${member}: typeof import('${lib.importFrom}')['${member}'];`
        ).join("\n");
      }
    });
    const umiDts = umiImportItems.map((item) => `const ${item}: typeof import('umi')['${item}']`).join(";\n");
    const reactDts = reactImportItems.map((item) => `const ${item}: typeof import('react')['${item}']`).join("\n");
    const content = `
// generated by umi
declare global {
const React: typeof import('react');
${dts.join("\n")}
const styles: any;
${umiDts}
${reactDts}
}
export {}
    `.trim() + `
`;
    (0, import_fs.writeFileSync)((0, import_path.join)(api.paths.cwd, "lowImport.d.ts"), content, "utf-8");
  });
  api.addBeforeBabelPresets(() => {
    var _a;
    const opts = normalizeLibs(api.appData.lowImport);
    const css = ((_a = api.config.lowImport) == null ? void 0 : _a.css) || "less";
    return [
      {
        plugins: [
          [import_babelPlugin.default, { opts, css, umiImportItems, reactImportItems }]
        ]
      }
    ];
  });
};
function normalizeLibs(libs) {
  const withObjs = {};
  const identifierToLib = {};
  const defaultToLib = {};
  const namespaceToLib = {};
  for (const lib of libs) {
    if (lib.withObj) {
      withObjs[lib.withObj] = lib;
    } else if (lib.namespaceImport) {
      namespaceToLib[lib.namespaceImport] = lib.importFrom;
    } else if (lib.defaultImport) {
      defaultToLib[lib.defaultImport] = lib.importFrom;
    } else {
      for (const member of lib.members || []) {
        identifierToLib[member] = lib.importFrom;
      }
    }
  }
  return {
    withObjs,
    identifierToLib,
    defaultToLib,
    namespaceToLib
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
