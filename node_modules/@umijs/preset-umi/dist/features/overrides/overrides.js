var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/features/overrides/overrides.ts
var overrides_exports = {};
__export(overrides_exports, {
  default: () => overrides_default,
  getOverridesCSS: () => getOverridesCSS
});
module.exports = __toCommonJS(overrides_exports);
var import_utils = require("@umijs/utils");
var import_fs = require("fs");
var import_path = require("path");
var import_watch = require("../../commands/dev/watch");
function getOverridesCSS(absSrcPath) {
  return (0, import_watch.expandCSSPaths)((0, import_path.join)(absSrcPath, "overrides")).find(import_fs.existsSync);
}
var overrides_default = (api) => {
  api.modifyConfig((memo) => {
    if (getOverridesCSS(api.paths.absSrcPath)) {
      memo.extraPostCSSPlugins ?? (memo.extraPostCSSPlugins = []);
      memo.extraPostCSSPlugins.push(
        // prefix #root for overrides.{ext} style file, to make sure selector priority is higher than async chunk style
        require("postcss-prefix-selector")({
          // why not #root?
          // antd will insert dom into body, prefix #root will not works for that
          prefix: "body",
          transform(_p, selector, prefixedSelector, filePath) {
            const isOverridesFile = (0, import_utils.winPath)(api.appData.overridesCSS[0]) === (0, import_utils.winPath)(filePath);
            if (isOverridesFile) {
              if (selector === "html") {
                return `html:first-child`;
              } else if (/^body([\s+~>[:]|$)/.test(selector)) {
                return `* + ${selector}`;
              }
              return prefixedSelector;
            }
            return selector;
          }
        })
      );
    }
    return memo;
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getOverridesCSS
});
